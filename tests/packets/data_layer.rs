const DATA_LAYER_PACKET: [u8; 80] = [
  0x08, 0x42, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xe3, 0x41, 0xbd, 0x6e,
  0x00, 0x01, 0xe3, 0x42, 0x9e, 0x2b, 0x90, 0xf9, 0x55, 0x75, 0x87, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x5d, 0xc4, 0x13, 0x1c, 0x66, 0xaf, 0xb0, 0x94, 0x03, 0x84, 0x4a, 0x5b, 0x97, 0x63, 0x22, 0x37,
  0x51, 0xfb, 0x27, 0xfc, 0xdc, 0xfe, 0x07, 0xf3, 0x44, 0x2c, 0x0a, 0xe4, 0x8f, 0xca, 0x30, 0x65,
  0x4b, 0xe8, 0x18, 0x06, 0x68, 0xbd, 0x7e, 0x0b, 0x28, 0xf9, 0x39, 0xf7, 0x3c, 0xcd, 0xfe, 0x40,
];

#[test]
fn test_data_layer_packet() {
  // Receiver address: Broadcast (ff:ff:ff:ff:ff:ff)
  // Transmitter address: Siemens_41:bd:6e (00:01:e3:41:bd:6e)
  // Destination address: Broadcast (ff:ff:ff:ff:ff:ff)
  // Source address: Siemens_42:9e:2b (00:01:e3:42:9e:2b)
  // BSS Id: Siemens_41:bd:6e (00:01:e3:41:bd:6e)
  // STA address: Broadcast (ff:ff:ff:ff:ff:ff)

  test_test_item(TestItem {
    bytes: &DATA_LAYER_PACKET,
    subtype: Some(FrameSubtype::Data(DataSubtype::Data)),
    ds_status: Some(DSStatus::FromDSToSTA),

    protected: true,

    duration_id: Some(DurationID::Duration(0)),

    receiver_address: "ff:ff:ff:ff:ff:ff".parse().unwrap(),
    transmitter_address: Some("00:01:e3:41:bd:6e".parse().unwrap()),

    destination_address: Some("ff:ff:ff:ff:ff:ff".parse().unwrap()),
    source_address: Some("00:01:e3:42:9e:2b".parse().unwrap()),

    bssid_address: Some("00:01:e3:41:bd:6e".parse().unwrap()),
    station_address: Some("ff:ff:ff:ff:ff:ff".parse().unwrap()),

    fragment_number: Some(0),
    sequence_number: Some(3993),

    ..Default::default()
  });

  let bap = [
    0x5d, 0xc4, 0x13, 0x1c, 0x66, 0xaf, 0xb0, 0x94, 0x03, 0x84, 0x4a, 0x5b, 0x97, 0x63, 0x22, 0x37,
    0x51, 0xfb, 0x27, 0xfc, 0xdc, 0xfe, 0x07, 0xf3, 0x44, 0x2c, 0x0a, 0xe4, 0x8f, 0xca, 0x30, 0x65,
    0x4b, 0xe8, 0x18, 0x06, 0x68, 0xbd, 0x7e, 0x0b, 0x28, 0xf9, 0x39, 0xf7, 0x3c, 0xcd, 0xfe, 0x40,
  ]
  .to_vec();

  let frame = Frame::new(&DATA_LAYER_PACKET[..]);
  match frame.next_layer().unwrap() {
    FrameLayer::Data(ref data_frame) => {
      let data_layer = data_frame.next_layer().unwrap().to_vec();
      assert_eq!(data_layer, bap, "data_layer");
    }
    _ => unreachable!(),
  }
}
